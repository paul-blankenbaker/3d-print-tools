#!/usr/bin/python3
#
# Use "--help" option for usage instructions

import argparse;
import os
import sys
    
def exit_error(msg):
    print(msg)
    show_help()
    exit(1)

def createScad(options):
    fileName = options.base_name + ".scad";
    print("Creating: {0}".format(fileName))
    f = open(fileName, 'w')
    f.write("""// Generated by retraction-tower.py
""")
    f.write('font = "%s";\n' % (options.font))
    f.write('platform_thick = %f;\n' % (options.base_thick))
    f.write('bridge_thick = %f;\n' % (options.bridge_thick));
    f.write('span_width = %d;\n' % (options.bridge_span));
    f.write('level_height = %d;\n' % (options.level_height));
    f.write('cone_bot_radius = %f;\n' % (options.cone_bot_radius));
    f.write('cone_top_radius = %f;\n' % (options.cone_top_radius));
    f.write('cone_height = %d;\n' % (options.cone_height));

    f.write("""
width = 5;
label_width = 10;
letter_size = 3.5;
letter_height = 1.5;
level_thick = bridge_thick + level_height;

o = width / 2 - letter_height / 2;

module letter(l) {
  // Use linear_extrude() to make the letters 3D objects as they
  // are only 2D shapes when only using text()
  linear_extrude(height = letter_height) {
    text(l, size = letter_size, font = font, halign = "center", valign = "center", $fn = 16);
  }
}

// Add one level of towers
module add_level(x, level, label) {
  z = level * level_thick;
  radius = width / 2;
  platform_len = label_width + span_width + radius;

  // Rectangular labeled column
  label_cx = x + label_width / 2;
  translate([label_cx, 0, platform_thick + z + level_height / 2]) difference() {
    color("blue") cube([label_width, width, level_height], center = true);
    translate([0, -o, 0]) rotate([90, 0, 0]) letter(label);
  };

  // Cylinder column at other end
  cyl_x = x + label_width + span_width + radius;
  translate([cyl_x, 0, z + platform_thick]) cylinder(level_height + bridge_thick, radius, radius);

  // Cone in middle
  if (cone_height > 0) {
    // Size of gap between label box and cylinder
    gap = span_width;
    // Pick x to center cone in gap space
    cone_cx = x + label_width + (gap / 2);
    translate([cone_cx, 0, z + platform_thick]) cylinder(cone_height, cone_bot_radius, cone_top_radius);
  }

  // Optional bridge platform across
  if (bridge_thick > 0) {
    // -label_width / 2, -width / 2
    bridge_cx = x; //platform_len / 2;
    translate([bridge_cx, -width / 2, z + level_height + platform_thick]) cube([platform_len, width, bridge_thick], false);
  }
}

// Add base plate
margin = width / 4;
platform_w = width + margin * 2;
platform_len = label_width + span_width + width + margin * 2;
translate([-margin, -platform_w / 2, 0]) cube([platform_len, platform_w, platform_thick], false);

""")

    retract = options.start;

    for i in range(0, options.levels):
        label = "%0.2f" % (retract)
        f.write('add_level(0, %d, "%0.2f");\n' % (i, retract))
        retract = retract + options.step_size
            
    f.close()
    
def createGcode(options):
    baseH = options.base_thick;
    retractStep = options.step_size;
    retract = options.start;
    
    fileName = options.base_name + ".gcode";
    print("Creating: {0}".format(fileName))
    f = open(fileName, 'w')
    cond = "if"
    f.write("""; Copy/paste below to BEFORE_LAYER change area.
;
; On slic3r-prusa3d, look for 'Before layer change G-code' under
; 'Printer Settings', 'Custom G-code' panel
""");

    # Fixed retraction related options
    feed_rate = ""
    z_lift = ""
    if options.feed_rate != None:
        feed_rate = " F{0}".format(options.feed_rate)
    if options.z_lift != None:
        z_lift = " Z{0}".format(options.z_lift)

    h = options.level_height + options.bridge_thick
        
    for level in range(0, options.levels):
        zStart = options.base_thick + (h * level)
        zEnd = zStart + h
        gcode = "{{{0} layer_z > {1} && layer_z < {2}}}\n; Level {3} - retract {4} mm\nM207{5} S{4}{6}\n"
        out = gcode.format(cond, zStart, zEnd, (level + 1), retract, feed_rate, z_lift);
        f.write(out)
        retract += retractStep
        cond = "elsif"
    f.write("{endif}\n")
    f.close()

def createStl(options):
    inFile = options.base_name + ".scad"
    outFile = options.base_name + ".stl"
    print("Creating: {0}".format(outFile))
    cmd = "openscad -o {0} {1}".format(outFile, inFile)
    os.system(cmd)

parser = argparse.ArgumentParser(prog="retraction-tower.py", description="Retraction tower SCAD/STL/GCODE generator")
parser.add_argument('--base-name', default='retraction-tower',
                    help='Base name for generated files')
parser.add_argument('--start', type=float, default=0.5,
                    help='Starting retraction value (mm)')
parser.add_argument('--step-size', type=float, default=0.25,
                    help='Amount of retraction adjustment per level (mm)')
parser.add_argument('--levels', type=int, default=7,
                    help='Number levels in tower (count)')
parser.add_argument('--level-height', type=float, default=7.2,
                    help='Height of each column in level (mm)')
parser.add_argument('--cone-bot-radius', type=float, default=2.5,
                    help='Radius of cone at bottom (mm)')
parser.add_argument('--cone-top-radius', type=float, default=0.0,
                    help='Radius of cone at top (mm)')
parser.add_argument('--cone-height', type=float, default=7.2,
                    help='Height of each cone in level (mm)')
parser.add_argument('--base-thick', type=float, default=1.2,
                    help='Base thickness (mm)')
parser.add_argument('--bridge-span', type=float, default=10.0,
                    help='Bridge span between columns (mm)')
parser.add_argument('--bridge-thick', type=float, default=0.6,
                    help='Bridge layer thickness (mm - 0 disables)')
parser.add_argument('--stl', type=int, default=1,
                    help='Create STL output (1 yes, 0 no)')
parser.add_argument('--feed-rate', type=int, default=None,
                    help='Retract feed rate (mm per minute - omit to leave alone)')
parser.add_argument('--z-lift', type=float, default=None,
                    help='Z lift on retraction (mm? - omit to leave alone)')
parser.add_argument('--font', default='Liberation Sans',
                    help='Name of font to use when labeling tower')
parser.add_argument('--version', action='version', version='%(prog)s 0.1')
options = parser.parse_args()

createScad(options)
createGcode(options)
if (options.stl == 1):
    createStl(options)
